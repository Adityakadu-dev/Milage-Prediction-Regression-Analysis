# -*- coding: utf-8 -*-
"""milege.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RlbG2JFRZ9V5SYjf2mI8-SwYy8iLPDgX

**SOURCE**

This dataset was taken the statLib library which is maintained at camegies mellon university. The dataset was used in the 1983 American Statistical association Exposition.

**DATASET INFORMATION**

The data concerns city-cycle fuel consumption in miles per gallon, to be predicted in term of 3 multivalued discrete and 5 continuous attributes.

**ATTRIBUTE INFORMATI0N:**

1. mpg:continuous
2. cylinders: multi-valued discrete
3. displacement:continuous
4. horsepower:continuous
5. weight:continuous
6. acceleration:continuous
7. model year:multi-valued discrete
8. origin:multi-valued discrete
9. car name:string(unique for each instance)

**IMPORT LIBRARY:**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""**IMPORT DATA:**"""

fuel=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv')

fuel.head()

fuel.columns

fuel.nunique()

"""**DATA PREPROCESSING:**"""

fuel.info()

fuel.describe()

fuel.corr()

"""**REMOVE MISSING VALUES:**"""

fuel=fuel.dropna()

fuel.info()

"""**DATA VISUALIZATION:**"""

sns.pairplot(fuel,x_vars=['displacement', 'horsepower', 'weight',
       'acceleration','mpg'],y_vars=['mpg']);

sns.regplot(x='displacement',y='mpg',data=fuel);

"""**DEFINE TARGET VARIABLE Y AND FEATURE X**:"""

y=fuel['mpg']

y.shape

x=fuel[['displacement', 'horsepower', 'weight',
       'acceleration']]

x.shape

x

"""**SCALING DATA:**"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

x=ss.fit_transform(x)

x

pd.DataFrame(x).describe()

"""**TRAIN TEST SPLIT DATA:**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y, train_size=0.7, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""LINER REGRESSION MODEL:"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train,y_train)

model.intercept_

model.coef_

"""**PREDICT TEST DATA:**"""

y_pred = model.predict(X_test)

y_pred

"""**MODEL ACCURACY**:"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error,r2_score

mean_absolute_error(y_test,y_pred)

r2_score(y_test,y_pred)

mean_absolute_percentage_error(y_test,y_pred)

"""**POLYNOMIAL REGRESSION:**"""

from sklearn.preprocessing import PolynomialFeatures

poly=PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)

X_train2=poly.fit_transform(X_train)

X_test2=poly.fit_transform(X_test)

model.fit(X_train2,y_train)

model.intercept_

model.coef_

y_pred_poly=model.predict(X_test2)

"""**MODEL ACCURACY:**"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error,r2_score

mean_absolute_error(y_test,y_pred_poly)

r2_score(y_test,y_pred_poly)

mean_absolute_percentage_error(y_test,y_pred_poly)